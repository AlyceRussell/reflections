#********************#
#
# Lesson 2 Reflections
#
#********************#

Q1: What happens when you initialise a repository? Why do you need to do it?

The initialisation tells the file that it is now a git repositiory and then by
using git commands, we can track changes that occur to the contained files.


Q2: How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is where you can upload documents you wish to add to your
repository. The working directory contains all files. Files are uploaded by
using the code "git add" then "git status" to check they are in the staging
area. Following this, "git commit" is used and a message is added using emacs.


Q3: How can you use the staging area to make sure you have one commit per
logical change?

By checking to see that a single file is in your commit. Also, make sure you
save files regularly and leave meaningful notes about each logical commit.


Q4: What are some situations when branching would be helpful in leeping your
history organised? How would branches help?

- Branches made be used when you have different versions of something, whether
that be difficulty level, language, etc


Q5: How do diagrams help you visualise the branch structure?

By allowing you to see the parent structure of each branch and what follow-
through changes/mistakes might be present.


Q6: What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

- The result by using the merge function is that we can see a simple graph of
where changes were made and on what branches using the given commit messages.
- The diagram allows us to see exactly where the changes occurred.


Q7: What are the pros and cons of Git's automatic merging vs always doing
merges manually?

       Pros: saves time, clashes will be highlighted
       Cons: may merge a bug or currupt code after merge

